"""
M√≥dulo agents simplificado para o sistema LLM as Judge.
Agora trabalha APENAS com respostas pr√©-geradas, removida toda l√≥gica de gera√ß√£o.
"""

from langsmith import Client
import os
from laaj.config import PROMPT_LAAJ

def chain_laaj(llm):
    """
    Cria chain do judge usando prompt do LangSmith.
    Esta √© a √∫nica chain necess√°ria no novo escopo - para avaliar respostas pr√©-geradas.
    
    Args:
        llm: Inst√¢ncia do modelo LLM que ser√° usado como judge
        
    Returns:
        Chain configurada com o prompt 'laaj-prompt' do LangSmith
    """
    langsmith_client = Client()  # permite fallback para vari√°veis de ambiente suportadas
    try:
        prompt = langsmith_client.pull_prompt(PROMPT_LAAJ)
    except Exception as e:
        raise RuntimeError(
            f"Falha ao carregar o prompt '{PROMPT_LAAJ}' no LangSmith. "
            "Verifique as vari√°veis LANGSMITH_API_KEY/LANGCHAIN_API_KEY, permiss√µes do projeto "
            "e se o prompt existe e est√° acess√≠vel."
        ) from e
    chain = prompt | llm
    return chain
    

if __name__ == "__main__":
    import asyncio
    from laaj.agents.llms import get_llm_llama_4_maverick
    
    async def test_judge_scenarios():
        print("üß™ Testando LLM as Judge com cen√°rios √≥bvios...")
        
        llm = get_llm_llama_4_maverick()
        chain = chain_laaj(llm)
        
        # Teste 1: Resposta A claramente melhor (mais completa e precisa)
        print("\n" + "="*60)
        print("üéØ TESTE 1 - Resposta A deve vencer (muito melhor)")
        print("="*60)
        
        input_data_1 = {
            "question": "Explique como funciona a fotoss√≠ntese.",
            "answer_a": "A fotoss√≠ntese √© um processo bioqu√≠mico fundamental realizado por plantas, algas e algumas bact√©rias, no qual a energia luminosa (principalmente solar) √© convertida em energia qu√≠mica. Durante este processo, o di√≥xido de carbono (CO‚ÇÇ) do ar e a √°gua (H‚ÇÇO) absorvida pelas ra√≠zes s√£o transformados em glicose (C‚ÇÜH‚ÇÅ‚ÇÇO‚ÇÜ) e oxig√™nio (O‚ÇÇ), utilizando a clorofila como catalisador. A equa√ß√£o qu√≠mica geral √©: 6CO‚ÇÇ + 6H‚ÇÇO + energia luminosa ‚Üí C‚ÇÜH‚ÇÅ‚ÇÇO‚ÇÜ + 6O‚ÇÇ. Este processo ocorre principalmente nos cloroplastos das c√©lulas vegetais e √© vital para a vida na Terra, pois produz o oxig√™nio que respiramos e serve como base da cadeia alimentar.",
            "answer_b": "Fotoss√≠ntese √© quando plantas fazem comida com sol."
        }
        
        print("üîç Invocando modelo para Teste 1...")
        response_1 = await chain.ainvoke(input_data_1)
        print("üìù Resposta Teste 1:")
        print(f"Tipo: {type(response_1)}")
        print(f"Conte√∫do: {response_1}")
        print(f"Resultado esperado: Resposta A (mais completa e cient√≠fica)")
        
        # Teste 2: Resposta B claramente melhor (mais precisa e atualizada)
        print("\n" + "="*60)
        print("üéØ TESTE 2 - Resposta B deve vencer (muito melhor)")
        print("="*60)
        
        input_data_2 = {
            "question": "Quando foi fundada a cidade de Bras√≠lia?",
            "answer_a": "Bras√≠lia foi fundada em 1950.",
            "answer_b": "Bras√≠lia foi inaugurada em 21 de abril de 1960, sendo constru√≠da durante o governo de Juscelino Kubitschek como parte de seu plano de metas '50 anos em 5'. A cidade foi planejada pelo urbanista L√∫cio Costa e teve sua arquitetura projetada por Oscar Niemeyer. Foi criada para ser a nova capital do Brasil, transferindo o centro pol√≠tico do Rio de Janeiro para o interior do pa√≠s."
        }
        
        print("üîç Invocando modelo para Teste 2...")
        response_2 = await chain.ainvoke(input_data_2)
        print("üìù Resposta Teste 2:")
        print(f"Tipo: {type(response_2)}")
        print(f"Conte√∫do: {response_2}")
        print(f"Resultado esperado: Resposta B (correta, completa e informativa)")
        
        # Teste 3: Ambas as respostas igualmente erradas (deve dar empate)
        print("\n" + "="*60)
        print("üéØ TESTE 3 - Deve dar Empate (ambas erradas)")
        print("="*60)
        
        input_data_3 = {
            "question": "Qual √© a capital da Fran√ßa?",
            "answer_a": "A capital da Fran√ßa √© Londres.",
            "answer_b": "A capital da Fran√ßa √© Madrid."
        }
        
        print("üîç Invocando modelo para Teste 3...")
        response_3 = await chain.ainvoke(input_data_3)
        print("üìù Resposta Teste 3:")
        print(f"Tipo: {type(response_3)}")
        print(f"Conte√∫do: {response_3}")
        print(f"Resultado esperado: Empate (ambas incorretas)")
        
        # Resumo dos testes
        print("\n" + "="*60)
        print("üìä RESUMO DOS TESTES")
        print("="*60)
        print("Teste 1 - Fotoss√≠ntese:")
        print(f"  Resultado: {response_1}")
        print(f"  Esperado: A (resposta cient√≠fica completa)")
        print()
        print("Teste 2 - Bras√≠lia:")
        print(f"  Resultado: {response_2}")
        print(f"  Esperado: B (data correta e informa√ß√µes completas)")
        print()
        print("Teste 3 - Capital Fran√ßa:")
        print(f"  Resultado: {response_3}")
        print(f"  Esperado: Empate (ambas incorretas)")
    
    # Executar testes ass√≠ncronos
    asyncio.run(test_judge_scenarios())
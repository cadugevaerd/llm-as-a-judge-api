#!/usr/bin/env python3
"""
Teste do sistema de timeout global
"""

import asyncio
import sys
import os

# Adicionar diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from laaj.workflow.workflow import main

async def test_timeout_scenarios():
    print("üß™ TESTANDO SISTEMA DE TIMEOUT\n")
    
    # TESTE 1: Workflow normal (dentro do timeout padr√£o de 120s)
    print("=" * 60)
    print("‚úÖ TESTE 1: WORKFLOW NORMAL (timeout 120s)")
    print("=" * 60)
    
    result1 = await main("Amigos")  # Timeout padr√£o 120s
    print(f"‚úÖ Resultado: {result1.get('better_llm', 'N/A')}")
    print(f"‚è∞ Status: {'SUCESSO' if 'TIMEOUT_ERROR' not in str(result1.get('better_llm', '')) else 'TIMEOUT'}\n")
    
    # TESTE 2: Timeout muito baixo com respostas pr√©-geradas (deve funcionar)
    print("=" * 60) 
    print("üé≠ TESTE 2: TIMEOUT BAIXO + PR√â-GERADAS (deve funcionar)")
    print("=" * 60)
    
    result2 = await main(
        input="Amigos",
        pre_generated_response_a="Hist√≥ria r√°pida A",
        pre_generated_response_b="Hist√≥ria r√°pida B", 
        timeout_seconds=10  # Timeout muito baixo, mas com pr√©-geradas deve funcionar
    )
    print(f"‚úÖ Resultado: {result2.get('better_llm', 'N/A')}")
    print(f"‚è∞ Status: {'SUCESSO' if 'TIMEOUT_ERROR' not in str(result2.get('better_llm', '')) else 'TIMEOUT'}\n")
    
    # TESTE 3: Timeout muito baixo sem pr√©-geradas (deve dar timeout)
    print("=" * 60)
    print("‚è∞ TESTE 3: TIMEOUT BAIXO + LLMs REAIS (deve dar timeout)")
    print("=" * 60)
    
    result3 = await main(
        input="Amigos",
        timeout_seconds=5  # Timeout imposs√≠vel para LLMs reais
    )
    print(f"‚ö†Ô∏è  Resultado: {result3.get('better_llm', 'N/A')}")
    print(f"‚è∞ Status: {'TIMEOUT (esperado)' if 'TIMEOUT_ERROR' in str(result3.get('better_llm', '')) else 'INESPERADO'}\n")
    
    # TESTE 4: Timeout customizado m√©dio
    print("=" * 60)
    print("üéØ TESTE 4: TIMEOUT CUSTOMIZADO (60s)")
    print("=" * 60)
    
    result4 = await main(
        input="Aventura",
        timeout_seconds=60  # Timeout menor que padr√£o
    )
    print(f"‚úÖ Resultado: {result4.get('better_llm', 'N/A')}")
    print(f"‚è∞ Status: {'SUCESSO' if 'TIMEOUT_ERROR' not in str(result4.get('better_llm', '')) else 'TIMEOUT'}\n")
    
    print("üéâ TODOS OS TESTES DE TIMEOUT CONCLU√çDOS!")

if __name__ == "__main__":
    asyncio.run(test_timeout_scenarios())